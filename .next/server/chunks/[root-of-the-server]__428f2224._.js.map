{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/lib/firebase.ts"],"sourcesContent":["import { initializeApp, getApps, FirebaseApp } from \"firebase/app\";\nimport {\n  getAuth,\n  Auth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  Firestore,\n  collection,\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  getDocs,\n  orderBy,\n  limit,\n  Timestamp,\n  addDoc,\n  onSnapshot,\n  QueryConstraint,\n} from \"firebase/firestore\";\nimport {\n  User,\n  ApiCredentials,\n  OAuthSession,\n  UsageStats,\n  SecurityLog,\n} from \"@/types\";\n\n// Firebase Client Configuration\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase Client\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApps()[0];\n}\n\n// Client-side Firebase services\nexport const auth: Auth = getAuth(app);\nexport const db: Firestore = getFirestore(app);\nexport const googleProvider: GoogleAuthProvider = new GoogleAuthProvider();\n\n// Collection References\nexport const COLLECTIONS = {\n  USERS: \"users\",\n  API_CREDENTIALS: \"api_credentials\",\n  OAUTH_SESSIONS: \"oauth_sessions\",\n  USAGE_STATS: \"usage_stats\",\n  SECURITY_LOGS: \"security_logs\",\n} as const;\n\n// Utility Functions\nexport const convertTimestamp = (timestamp: Timestamp | Date): Date => {\n  if (timestamp instanceof Timestamp) {\n    return timestamp.toDate();\n  }\n  return timestamp;\n};\n\nexport const convertToTimestamp = (date: Date): Timestamp => {\n  return Timestamp.fromDate(date);\n};\n\n// Authentication Functions\nexport const signInWithGoogle = async (): Promise<FirebaseUser | null> => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    return null;\n  }\n};\n\nexport const signOutUser = async (): Promise<void> => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n  }\n};\n\nexport const onAuthStateChange = (\n  callback: (user: FirebaseUser | null) => void,\n) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// User Management\nexport const createUser = async (\n  userData: Omit<User, \"id\" | \"createdAt\" | \"updatedAt\">,\n): Promise<string> => {\n  const newUser = {\n    ...userData,\n    createdAt: convertToTimestamp(new Date()),\n    updatedAt: convertToTimestamp(new Date()),\n  };\n\n  const userRef = await addDoc(collection(db, COLLECTIONS.USERS), newUser);\n  return userRef.id;\n};\n\nexport const getUser = async (userId: string): Promise<User | null> => {\n  const userDoc = await getDoc(doc(db, COLLECTIONS.USERS, userId));\n  if (!userDoc.exists()) return null;\n\n  const data = userDoc.data();\n  return {\n    ...data,\n    id: userDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as User;\n};\n\nexport const getUserByEmail = async (email: string): Promise<User | null> => {\n  const q = query(\n    collection(db, COLLECTIONS.USERS),\n    where(\"email\", \"==\", email),\n    limit(1),\n  );\n\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) return null;\n\n  const userDoc = querySnapshot.docs[0];\n  const data = userDoc.data();\n\n  return {\n    ...data,\n    id: userDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as User;\n};\n\nexport const updateUser = async (\n  userId: string,\n  updates: Partial<User>,\n): Promise<void> => {\n  const userRef = doc(db, COLLECTIONS.USERS, userId);\n  await updateDoc(userRef, {\n    ...updates,\n    updatedAt: convertToTimestamp(new Date()),\n  });\n};\n\n// API Credentials Management\nexport const createApiCredentials = async (\n  credentialsData: Omit<ApiCredentials, \"id\" | \"createdAt\" | \"updatedAt\">,\n): Promise<string> => {\n  const newCredentials = {\n    ...credentialsData,\n    createdAt: convertToTimestamp(new Date()),\n    updatedAt: convertToTimestamp(new Date()),\n  };\n\n  const credRef = await addDoc(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    newCredentials,\n  );\n  return credRef.id;\n};\n\nexport const getApiCredentials = async (\n  credentialId: string,\n): Promise<ApiCredentials | null> => {\n  const credDoc = await getDoc(\n    doc(db, COLLECTIONS.API_CREDENTIALS, credentialId),\n  );\n  if (!credDoc.exists()) return null;\n\n  const data = credDoc.data();\n  return {\n    ...data,\n    id: credDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as ApiCredentials;\n};\n\nexport const getApiCredentialsByClientId = async (\n  clientId: string,\n): Promise<ApiCredentials | null> => {\n  const q = query(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    where(\"clientId\", \"==\", clientId),\n    limit(1),\n  );\n\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) return null;\n\n  const credDoc = querySnapshot.docs[0];\n  const data = credDoc.data();\n\n  return {\n    ...data,\n    id: credDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as ApiCredentials;\n};\n\nexport const getUserApiCredentials = async (\n  userId: string,\n): Promise<ApiCredentials[]> => {\n  const q = query(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map((doc) => {\n    const data = doc.data();\n    return {\n      ...data,\n      id: doc.id,\n      createdAt: convertTimestamp(data.createdAt),\n      updatedAt: convertTimestamp(data.updatedAt),\n    } as ApiCredentials;\n  });\n};\n\nexport const updateApiCredentials = async (\n  credentialId: string,\n  updates: Partial<ApiCredentials>,\n): Promise<void> => {\n  const credRef = doc(db, COLLECTIONS.API_CREDENTIALS, credentialId);\n  await updateDoc(credRef, {\n    ...updates,\n    updatedAt: convertToTimestamp(new Date()),\n  });\n};\n\nexport const deleteApiCredentials = async (\n  credentialId: string,\n): Promise<void> => {\n  await deleteDoc(doc(db, COLLECTIONS.API_CREDENTIALS, credentialId));\n};\n\n// OAuth Session Management\nexport const createOAuthSession = async (\n  sessionData: Omit<\n    OAuthSession,\n    \"createdAt\" | \"expiresAt\" | \"authorizedAt\" | \"tokenExpiresAt\"\n  > & { expiresAt: Date },\n): Promise<string> => {\n  const newSession = {\n    ...sessionData,\n    createdAt: convertToTimestamp(new Date()),\n    expiresAt: convertToTimestamp(sessionData.expiresAt),\n  };\n\n  const sessionRef = await addDoc(\n    collection(db, COLLECTIONS.OAUTH_SESSIONS),\n    newSession,\n  );\n  return sessionRef.id;\n};\n\nexport const getOAuthSession = async (\n  sessionId: string,\n): Promise<OAuthSession | null> => {\n  const sessionDoc = await getDoc(\n    doc(db, COLLECTIONS.OAUTH_SESSIONS, sessionId),\n  );\n  if (!sessionDoc.exists()) return null;\n\n  const data = sessionDoc.data();\n  return {\n    ...data,\n    createdAt: convertTimestamp(data.createdAt),\n    expiresAt: convertTimestamp(data.expiresAt),\n    authorizedAt: data.authorizedAt\n      ? convertTimestamp(data.authorizedAt)\n      : undefined,\n    tokenExpiresAt: data.tokenExpiresAt\n      ? convertTimestamp(data.tokenExpiresAt)\n      : undefined,\n  } as OAuthSession;\n};\n\nexport const updateOAuthSession = async (\n  sessionId: string,\n  updates: Partial<OAuthSession>,\n): Promise<void> => {\n  const updateData: any = { ...updates };\n\n  if (updates.expiresAt) {\n    updateData.expiresAt = convertToTimestamp(updates.expiresAt);\n  }\n  if (updates.authorizedAt) {\n    updateData.authorizedAt = convertToTimestamp(updates.authorizedAt);\n  }\n  if (updates.tokenExpiresAt) {\n    updateData.tokenExpiresAt = convertToTimestamp(updates.tokenExpiresAt);\n  }\n\n  await updateDoc(\n    doc(db, COLLECTIONS.OAUTH_SESSIONS, sessionId),\n    updateData,\n  );\n};\n\n// Usage Statistics\nexport const recordUsageStats = async (\n  credentialId: string,\n  success: boolean,\n): Promise<void> => {\n  const today = new Date().toISOString().split(\"T\")[0];\n  const statsId = `${credentialId}_${today}`;\n\n  const statsRef = doc(db, COLLECTIONS.USAGE_STATS, statsId);\n  const statsDoc = await getDoc(statsRef);\n\n  if (statsDoc.exists()) {\n    const currentData = statsDoc.data();\n    await updateDoc(statsRef, {\n      requests: currentData.requests + 1,\n      errors: success ? currentData.errors : currentData.errors + 1,\n      successfulAuths: success\n        ? currentData.successfulAuths + 1\n        : currentData.successfulAuths,\n      failedAuths: success\n        ? currentData.failedAuths\n        : currentData.failedAuths + 1,\n      lastRequest: convertToTimestamp(new Date()),\n    });\n  } else {\n    await setDoc(statsRef, {\n      credentialId,\n      date: today,\n      requests: 1,\n      errors: success ? 0 : 1,\n      successfulAuths: success ? 1 : 0,\n      failedAuths: success ? 0 : 1,\n      lastRequest: convertToTimestamp(new Date()),\n    });\n  }\n};\n\n// Security Logging\nexport const logSecurityEvent = async (\n  logData: Omit<SecurityLog, \"id\" | \"timestamp\">,\n): Promise<void> => {\n  const logDoc = {\n    ...logData,\n    timestamp: convertToTimestamp(new Date()),\n  };\n\n  await addDoc(collection(db, COLLECTIONS.SECURITY_LOGS), logDoc);\n};\n\n// Cleanup expired sessions and tokens\nexport const cleanupExpiredSessions = async (): Promise<void> => {\n  const now = new Date();\n  const expiredSessionsQuery = query(\n    collection(db, COLLECTIONS.OAUTH_SESSIONS),\n    where(\"expiresAt\", \"<\", convertToTimestamp(now)),\n  );\n\n  const expiredSessions = await getDocs(expiredSessionsQuery);\n  const deletePromises = expiredSessions.docs.map((doc) => deleteDoc(doc.ref));\n\n  await Promise.all(deletePromises);\n};\n\nexport default {\n  auth,\n  db,\n  googleProvider,\n  signInWithGoogle,\n  signOutUser,\n  onAuthStateChange,\n  createUser,\n  getUser,\n  getUserByEmail,\n  updateUser,\n  createApiCredentials,\n  getApiCredentials,\n  getApiCredentialsByClientId,\n  getUserApiCredentials,\n  updateApiCredentials,\n  deleteApiCredentials,\n  createOAuthSession,\n  getOAuthSession,\n  updateOAuthSession,\n  recordUsageStats,\n  logSecurityEvent,\n  cleanupExpiredSessions,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/lib/utils.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport { nanoid } from \"nanoid\";\nimport CryptoJS from \"crypto-js\";\nimport { OAuthScope, SessionUrlComponents, RateLimitResult } from \"@/types\";\n\n// JWT Configuration\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key\";\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"7d\";\n\n// Encryption Configuration\nconst ENCRYPTION_KEY =\n  process.env.ENCRYPTION_KEY || \"your-32-character-encryption-key\";\n\n// OAuth Configuration\nconst APP_DOMAIN = process.env.APP_DOMAIN || \"auth-GLAstudio.auth\";\n\n/**\n * JWT Token Management\n */\nexport const generateJWT = (\n  payload: object,\n  expiresIn: string = JWT_EXPIRES_IN,\n): string => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn });\n};\n\nexport const verifyJWT = <T = unknown>(token: string): T | null => {\n  try {\n    return jwt.verify(token, JWT_SECRET) as T;\n  } catch (error) {\n    console.error(\"JWT verification failed:\", error);\n    return null;\n  }\n};\n\nexport const decodeJWT = <T = unknown>(token: string): T | null => {\n  try {\n    return jwt.decode(token) as T;\n  } catch (error) {\n    console.error(\"JWT decode failed:\", error);\n    return null;\n  }\n};\n\n/**\n * Encryption/Decryption\n */\nexport const encrypt = (text: string): string => {\n  const encrypted = CryptoJS.AES.encrypt(text, ENCRYPTION_KEY).toString();\n  return encrypted;\n};\n\nexport const decrypt = (encryptedText: string): string => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedText, ENCRYPTION_KEY);\n    return bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return \"\";\n  }\n};\n\n/**\n * Secure Random ID Generation\n */\nexport const generateClientId = (): string => {\n  return `gla_${nanoid(32)}`;\n};\n\nexport const generateClientSecret = (): string => {\n  return crypto.randomBytes(32).toString(\"hex\");\n};\n\nexport const generateApiKey = (): string => {\n  return `gla_api_${nanoid(40)}`;\n};\n\nexport const generateSessionId = (): string => {\n  // 128-bit decoded ID as specified\n  return crypto.randomBytes(16).toString(\"hex\");\n};\n\nexport const generateRotationId = (): string => {\n  return nanoid(16);\n};\n\nexport const generateAuthorizationCode = (): string => {\n  return nanoid(32);\n};\n\nexport const generateAccessToken = (): string => {\n  return crypto.randomBytes(32).toString(\"hex\");\n};\n\nexport const generateRefreshToken = (): string => {\n  return crypto.randomBytes(32).toString(\"hex\");\n};\n\nexport const generateState = (): string => {\n  return crypto.randomBytes(16).toString(\"hex\");\n};\n\n/**\n * PKCE (Proof Key for Code Exchange) Support\n */\nexport const generateCodeVerifier = (): string => {\n  return crypto.randomBytes(32).toString(\"base64url\");\n};\n\nexport const generateCodeChallenge = (verifier: string): string => {\n  return crypto.createHash(\"sha256\").update(verifier).digest(\"base64url\");\n};\n\nexport const verifyCodeChallenge = (\n  verifier: string,\n  challenge: string,\n): boolean => {\n  const computedChallenge = generateCodeChallenge(verifier);\n  return computedChallenge === challenge;\n};\n\n/**\n * Session URL Generation\n */\nexport const generateSessionUrl = (\n  components: SessionUrlComponents,\n): string => {\n  const { sessionId, rotationId, loginNumber } = components;\n  return `https://${APP_DOMAIN}/${sessionId}/${rotationId}/${loginNumber}`;\n};\n\nexport const parseSessionUrl = (url: string): SessionUrlComponents | null => {\n  try {\n    const urlObj = new URL(url);\n    const pathParts = urlObj.pathname.split(\"/\").filter(Boolean);\n\n    if (pathParts.length !== 3) {\n      return null;\n    }\n\n    const [sessionId, rotationId, loginNumberStr] = pathParts;\n    const loginNumber = parseInt(loginNumberStr, 10);\n\n    if (isNaN(loginNumber)) {\n      return null;\n    }\n\n    return {\n      sessionId,\n      rotationId,\n      loginNumber,\n    };\n  } catch {\n    return null;\n  }\n};\n\n/**\n * OAuth Scope Validation\n */\nexport const validateScopes = (requestedScopes: string[]): OAuthScope[] => {\n  const validScopes: OAuthScope[] = [\n    \"profile\",\n    \"email\",\n    \"openid\",\n    \"read:user\",\n    \"write:user\",\n  ];\n  return requestedScopes.filter((scope) =>\n    validScopes.includes(scope as OAuthScope),\n  ) as OAuthScope[];\n};\n\nexport const scopesToString = (scopes: OAuthScope[]): string => {\n  return scopes.join(\" \");\n};\n\nexport const stringToScopes = (scopeString: string): OAuthScope[] => {\n  return validateScopes(scopeString.split(\" \").filter(Boolean));\n};\n\n/**\n * URL Validation\n */\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const isValidRedirectUri = (\n  uri: string,\n  allowedUris: string[],\n): boolean => {\n  if (!isValidUrl(uri)) {\n    return false;\n  }\n\n  // Exact match or wildcard match\n  return allowedUris.some((allowedUri) => {\n    if (allowedUri === uri) {\n      return true;\n    }\n\n    // Support wildcard matching for subdomains\n    if (allowedUri.includes(\"*\")) {\n      const pattern = allowedUri.replace(/\\*/g, \".*\");\n      const regex = new RegExp(`^${pattern}$`);\n      return regex.test(uri);\n    }\n\n    return false;\n  });\n};\n\n/**\n * Rate Limiting Utilities\n */\nexport const calculateRateLimit = (\n  requests: number,\n  windowStart: Date,\n  maxRequests: number,\n  windowMs: number,\n): RateLimitResult => {\n  const now = new Date();\n  const windowEnd = new Date(windowStart.getTime() + windowMs);\n\n  if (now > windowEnd) {\n    // Window has expired, reset\n    return {\n      allowed: true,\n      remaining: maxRequests - 1,\n      resetTime: new Date(now.getTime() + windowMs),\n      limit: maxRequests,\n    };\n  }\n\n  const allowed = requests < maxRequests;\n  const remaining = Math.max(0, maxRequests - requests - (allowed ? 1 : 0));\n\n  return {\n    allowed,\n    remaining,\n    resetTime: windowEnd,\n    limit: maxRequests,\n  };\n};\n\n/**\n * Data Validation\n */\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const validateClientId = (clientId: string): boolean => {\n  return /^gla_[a-zA-Z0-9_-]{32}$/.test(clientId);\n};\n\nexport const validateApiKey = (apiKey: string): boolean => {\n  return /^gla_api_[a-zA-Z0-9_-]{40}$/.test(apiKey);\n};\n\n/**\n * Time Utilities\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  return new Date(date.getTime() + minutes * 60000);\n};\n\nexport const addHours = (date: Date, hours: number): Date => {\n  return new Date(date.getTime() + hours * 3600000);\n};\n\nexport const addDays = (date: Date, days: number): Date => {\n  return new Date(date.getTime() + days * 86400000);\n};\n\nexport const isExpired = (expiryDate: Date): boolean => {\n  return new Date() > expiryDate;\n};\n\n/**\n * Error Handling\n */\nexport const createOAuthError = (\n  error: string,\n  description?: string,\n  state?: string,\n): { error: string; error_description?: string; state?: string } => {\n  const errorResponse: {\n    error: string;\n    error_description?: string;\n    state?: string;\n  } = { error };\n\n  if (description) {\n    errorResponse.error_description = description;\n  }\n\n  if (state) {\n    errorResponse.state = state;\n  }\n\n  return errorResponse;\n};\n\n/**\n * Request Utilities\n */\nexport const getClientIpAddress = (request: Request): string => {\n  const forwarded = request.headers.get(\"x-forwarded-for\");\n  const realIp = request.headers.get(\"x-real-ip\");\n  const cfConnectingIp = request.headers.get(\"cf-connecting-ip\");\n\n  if (cfConnectingIp) return cfConnectingIp;\n  if (realIp) return realIp;\n  if (forwarded) return forwarded.split(\",\")[0].trim();\n\n  return \"unknown\";\n};\n\nexport const getUserAgent = (request: Request): string => {\n  return request.headers.get(\"user-agent\") || \"unknown\";\n};\n\n/**\n * Password Utilities (for future email/password auth)\n */\nexport const hashPassword = async (password: string): Promise<string> => {\n  const bcrypt = await import(\"bcryptjs\");\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\nexport const verifyPassword = async (\n  password: string,\n  hash: string,\n): Promise<boolean> => {\n  const bcrypt = await import(\"bcryptjs\");\n  return bcrypt.compare(password, hash);\n};\n\n/**\n * API Response Utilities\n */\nexport const createSuccessResponse = <T>(data: T, message?: string) => {\n  return {\n    success: true,\n    data,\n    message,\n  };\n};\n\nexport const createErrorResponse = (error: string, message?: string) => {\n  return {\n    success: false,\n    error,\n    message,\n  };\n};\n\n/**\n * Logging Utilities\n */\nexport const createSecurityLogData = (\n  action: string,\n  success: boolean,\n  request: Request,\n  userId?: string,\n  credentialId?: string,\n  error?: string,\n  metadata?: Record<string, unknown>,\n) => {\n  return {\n    action,\n    success,\n    ip: getClientIpAddress(request),\n    userAgent: getUserAgent(request),\n    userId,\n    credentialId,\n    error,\n    metadata,\n  };\n};\n\n/**\n * Development Utilities\n */\nexport const isDevelopment = (): boolean => {\n  return process.env.NODE_ENV === \"development\";\n};\n\nexport const isProduction = (): boolean => {\n  return process.env.NODE_ENV === \"production\";\n};\n\n/**\n * Sanitization\n */\nexport const sanitizeRedirectUris = (uris: string): string[] => {\n  return uris\n    .split(\",\")\n    .map((uri) => uri.trim())\n    .filter((uri) => uri.length > 0 && isValidUrl(uri));\n};\n\nexport const sanitizeAllowedOrigins = (origins: string): string[] => {\n  return origins\n    .split(\",\")\n    .map((origin) => origin.trim())\n    .filter((origin) => origin.length > 0);\n};\n\n/**\n * Export all utilities as default\n */\nconst utils = {\n  generateJWT,\n  verifyJWT,\n  decodeJWT,\n  encrypt,\n  decrypt,\n  generateClientId,\n  generateClientSecret,\n  generateApiKey,\n  generateSessionId,\n  generateRotationId,\n  generateAuthorizationCode,\n  generateAccessToken,\n  generateRefreshToken,\n  generateState,\n  generateCodeVerifier,\n  generateCodeChallenge,\n  verifyCodeChallenge,\n  generateSessionUrl,\n  parseSessionUrl,\n  validateScopes,\n  scopesToString,\n  stringToScopes,\n  isValidUrl,\n  isValidRedirectUri,\n  calculateRateLimit,\n  validateEmail,\n  validateClientId,\n  validateApiKey,\n  addMinutes,\n  addHours,\n  addDays,\n  isExpired,\n  createOAuthError,\n  getClientIpAddress,\n  getUserAgent,\n  hashPassword,\n  verifyPassword,\n  createSuccessResponse,\n  createErrorResponse,\n  createSecurityLogData,\n  isDevelopment,\n  isProduction,\n  sanitizeRedirectUris,\n  sanitizeAllowedOrigins,\n};\n\nexport default utils;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AAGA,oBAAoB;AACpB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAC7C,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc,IAAI;AAErD,2BAA2B;AAC3B,MAAM,iBACJ,QAAQ,GAAG,CAAC,cAAc,IAAI;AAEhC,sBAAsB;AACtB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAKtC,MAAM,cAAc,CACzB,SACA,YAAoB,cAAc;IAElC,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE;IAAU;AACnD;AAEO,MAAM,YAAY,CAAc;IACrC,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;IACT;AACF;AAEO,MAAM,YAAY,CAAc;IACrC,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO;IACT;AACF;AAKO,MAAM,UAAU,CAAC;IACtB,MAAM,YAAY,uIAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,gBAAgB,QAAQ;IACrE,OAAO;AACT;AAEO,MAAM,UAAU,CAAC;IACtB,IAAI;QACF,MAAM,QAAQ,uIAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe;QAClD,OAAO,MAAM,QAAQ,CAAC,uIAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,IAAI;IACzC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO;IACT;AACF;AAKO,MAAM,mBAAmB;IAC9B,OAAO,CAAC,IAAI,EAAE,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE,KAAK;AAC5B;AAEO,MAAM,uBAAuB;IAClC,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAEO,MAAM,iBAAiB;IAC5B,OAAO,CAAC,QAAQ,EAAE,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE,KAAK;AAChC;AAEO,MAAM,oBAAoB;IAC/B,kCAAkC;IAClC,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAEO,MAAM,qBAAqB;IAChC,OAAO,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE;AAChB;AAEO,MAAM,4BAA4B;IACvC,OAAO,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE;AAChB;AAEO,MAAM,sBAAsB;IACjC,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAEO,MAAM,uBAAuB;IAClC,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAEO,MAAM,gBAAgB;IAC3B,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAKO,MAAM,uBAAuB;IAClC,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;AACzC;AAEO,MAAM,wBAAwB,CAAC;IACpC,OAAO,qGAAA,CAAA,UAAM,CAAC,UAAU,CAAC,UAAU,MAAM,CAAC,UAAU,MAAM,CAAC;AAC7D;AAEO,MAAM,sBAAsB,CACjC,UACA;IAEA,MAAM,oBAAoB,sBAAsB;IAChD,OAAO,sBAAsB;AAC/B;AAKO,MAAM,qBAAqB,CAChC;IAEA,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG;IAC/C,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,EAAE,UAAU,CAAC,EAAE,WAAW,CAAC,EAAE,aAAa;AAC1E;AAEO,MAAM,kBAAkB,CAAC;IAC9B,IAAI;QACF,MAAM,SAAS,IAAI,IAAI;QACvB,MAAM,YAAY,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC;QAEpD,IAAI,UAAU,MAAM,KAAK,GAAG;YAC1B,OAAO;QACT;QAEA,MAAM,CAAC,WAAW,YAAY,eAAe,GAAG;QAChD,MAAM,cAAc,SAAS,gBAAgB;QAE7C,IAAI,MAAM,cAAc;YACtB,OAAO;QACT;QAEA,OAAO;YACL;YACA;YACA;QACF;IACF,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAKO,MAAM,iBAAiB,CAAC;IAC7B,MAAM,cAA4B;QAChC;QACA;QACA;QACA;QACA;KACD;IACD,OAAO,gBAAgB,MAAM,CAAC,CAAC,QAC7B,YAAY,QAAQ,CAAC;AAEzB;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,OAAO,IAAI,CAAC;AACrB;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,eAAe,YAAY,KAAK,CAAC,KAAK,MAAM,CAAC;AACtD;AAKO,MAAM,aAAa,CAAC;IACzB,IAAI;QACF,IAAI,IAAI;QACR,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAM,qBAAqB,CAChC,KACA;IAEA,IAAI,CAAC,WAAW,MAAM;QACpB,OAAO;IACT;IAEA,gCAAgC;IAChC,OAAO,YAAY,IAAI,CAAC,CAAC;QACvB,IAAI,eAAe,KAAK;YACtB,OAAO;QACT;QAEA,2CAA2C;QAC3C,IAAI,WAAW,QAAQ,CAAC,MAAM;YAC5B,MAAM,UAAU,WAAW,OAAO,CAAC,OAAO;YAC1C,MAAM,QAAQ,IAAI,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACvC,OAAO,MAAM,IAAI,CAAC;QACpB;QAEA,OAAO;IACT;AACF;AAKO,MAAM,qBAAqB,CAChC,UACA,aACA,aACA;IAEA,MAAM,MAAM,IAAI;IAChB,MAAM,YAAY,IAAI,KAAK,YAAY,OAAO,KAAK;IAEnD,IAAI,MAAM,WAAW;QACnB,4BAA4B;QAC5B,OAAO;YACL,SAAS;YACT,WAAW,cAAc;YACzB,WAAW,IAAI,KAAK,IAAI,OAAO,KAAK;YACpC,OAAO;QACT;IACF;IAEA,MAAM,UAAU,WAAW;IAC3B,MAAM,YAAY,KAAK,GAAG,CAAC,GAAG,cAAc,WAAW,CAAC,UAAU,IAAI,CAAC;IAEvE,OAAO;QACL;QACA;QACA,WAAW;QACX,OAAO;IACT;AACF;AAKO,MAAM,gBAAgB,CAAC;IAC5B,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AACzB;AAEO,MAAM,mBAAmB,CAAC;IAC/B,OAAO,0BAA0B,IAAI,CAAC;AACxC;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,8BAA8B,IAAI,CAAC;AAC5C;AAKO,MAAM,aAAa,CAAC,MAAY;IACrC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,UAAU;AAC7C;AAEO,MAAM,WAAW,CAAC,MAAY;IACnC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,QAAQ;AAC3C;AAEO,MAAM,UAAU,CAAC,MAAY;IAClC,OAAO,IAAI,KAAK,KAAK,OAAO,KAAK,OAAO;AAC1C;AAEO,MAAM,YAAY,CAAC;IACxB,OAAO,IAAI,SAAS;AACtB;AAKO,MAAM,mBAAmB,CAC9B,OACA,aACA;IAEA,MAAM,gBAIF;QAAE;IAAM;IAEZ,IAAI,aAAa;QACf,cAAc,iBAAiB,GAAG;IACpC;IAEA,IAAI,OAAO;QACT,cAAc,KAAK,GAAG;IACxB;IAEA,OAAO;AACT;AAKO,MAAM,qBAAqB,CAAC;IACjC,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC;IACtC,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC;IACnC,MAAM,iBAAiB,QAAQ,OAAO,CAAC,GAAG,CAAC;IAE3C,IAAI,gBAAgB,OAAO;IAC3B,IAAI,QAAQ,OAAO;IACnB,IAAI,WAAW,OAAO,UAAU,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;IAElD,OAAO;AACT;AAEO,MAAM,eAAe,CAAC;IAC3B,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;AAC9C;AAKO,MAAM,eAAe,OAAO;IACjC,MAAM,SAAS;IACf,MAAM,aAAa;IACnB,OAAO,OAAO,IAAI,CAAC,UAAU;AAC/B;AAEO,MAAM,iBAAiB,OAC5B,UACA;IAEA,MAAM,SAAS;IACf,OAAO,OAAO,OAAO,CAAC,UAAU;AAClC;AAKO,MAAM,wBAAwB,CAAI,MAAS;IAChD,OAAO;QACL,SAAS;QACT;QACA;IACF;AACF;AAEO,MAAM,sBAAsB,CAAC,OAAe;IACjD,OAAO;QACL,SAAS;QACT;QACA;IACF;AACF;AAKO,MAAM,wBAAwB,CACnC,QACA,SACA,SACA,QACA,cACA,OACA;IAEA,OAAO;QACL;QACA;QACA,IAAI,mBAAmB;QACvB,WAAW,aAAa;QACxB;QACA;QACA;QACA;IACF;AACF;AAKO,MAAM,gBAAgB;IAC3B,OAAO,oDAAyB;AAClC;AAEO,MAAM,eAAe;IAC1B,OAAO,oDAAyB;AAClC;AAKO,MAAM,uBAAuB,CAAC;IACnC,OAAO,KACJ,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,MAAQ,IAAI,IAAI,IACrB,MAAM,CAAC,CAAC,MAAQ,IAAI,MAAM,GAAG,KAAK,WAAW;AAClD;AAEO,MAAM,yBAAyB,CAAC;IACrC,OAAO,QACJ,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,SAAW,OAAO,IAAI,IAC3B,MAAM,CAAC,CAAC,SAAW,OAAO,MAAM,GAAG;AACxC;AAEA;;CAEC,GACD,MAAM,QAAQ;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/lib/rateLimiter.ts"],"sourcesContent":["import { RateLimitResult, ApiCredentials } from \"@/types\";\nimport { calculateRateLimit } from \"@/lib/utils\";\n\ninterface RateLimitEntry {\n  requests: number;\n  windowStart: Date;\n  lastRequest: Date;\n}\n\ninterface RateLimitStore {\n  [key: string]: RateLimitEntry;\n}\n\ninterface RateLimitConfig {\n  maxRequests: number;\n  windowMs: number;\n  enabled: boolean;\n}\n\ninterface RateLimitOptions extends RateLimitConfig {\n  keyGenerator?: (identifier: string) => string;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n}\n\nclass RateLimiter {\n  private store: RateLimitStore = {};\n  private cleanupInterval: NodeJS.Timeout | null = null;\n  private defaultConfig: RateLimitConfig;\n\n  constructor(defaultConfig?: Partial<RateLimitConfig>) {\n    this.defaultConfig = {\n      maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || \"100\", 10),\n      windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || \"900000\", 10), // 15 minutes\n      enabled: true,\n      ...defaultConfig,\n    };\n\n    // Start cleanup interval (run every 5 minutes)\n    this.startCleanup();\n  }\n\n  /**\n   * Check if a request should be rate limited\n   */\n  public async checkRateLimit(\n    identifier: string,\n    config?: Partial<RateLimitOptions>,\n  ): Promise<RateLimitResult> {\n    const options = { ...this.defaultConfig, ...config };\n\n    if (!options.enabled) {\n      return {\n        allowed: true,\n        remaining: options.maxRequests,\n        resetTime: new Date(Date.now() + options.windowMs),\n        limit: options.maxRequests,\n      };\n    }\n\n    const key = options.keyGenerator\n      ? options.keyGenerator(identifier)\n      : identifier;\n    const now = new Date();\n\n    // Get or create rate limit entry\n    let entry = this.store[key];\n\n    if (!entry || this.isWindowExpired(entry, options.windowMs)) {\n      // Create new or reset expired entry\n      entry = {\n        requests: 0,\n        windowStart: now,\n        lastRequest: now,\n      };\n      this.store[key] = entry;\n    }\n\n    // Calculate rate limit result\n    const result = calculateRateLimit(\n      entry.requests,\n      entry.windowStart,\n      options.maxRequests,\n      options.windowMs,\n    );\n\n    // Update entry if request is allowed\n    if (result.allowed) {\n      entry.requests += 1;\n      entry.lastRequest = now;\n    }\n\n    return result;\n  }\n\n  /**\n   * Record a request for rate limiting\n   */\n  public async recordRequest(\n    identifier: string,\n    success: boolean = true,\n    config?: Partial<RateLimitOptions>,\n  ): Promise<void> {\n    const options = { ...this.defaultConfig, ...config };\n\n    if (!options.enabled) {\n      return;\n    }\n\n    // Skip recording based on configuration\n    if (success && options.skipSuccessfulRequests) {\n      return;\n    }\n\n    if (!success && options.skipFailedRequests) {\n      return;\n    }\n\n    const key = options.keyGenerator\n      ? options.keyGenerator(identifier)\n      : identifier;\n    const now = new Date();\n\n    let entry = this.store[key];\n\n    if (!entry || this.isWindowExpired(entry, options.windowMs)) {\n      entry = {\n        requests: 1,\n        windowStart: now,\n        lastRequest: now,\n      };\n      this.store[key] = entry;\n    } else {\n      entry.requests += 1;\n      entry.lastRequest = now;\n    }\n  }\n\n  /**\n   * Get current rate limit status without incrementing\n   */\n  public async getRateLimitStatus(\n    identifier: string,\n    config?: Partial<RateLimitOptions>,\n  ): Promise<RateLimitResult> {\n    const options = { ...this.defaultConfig, ...config };\n    const key = options.keyGenerator\n      ? options.keyGenerator(identifier)\n      : identifier;\n\n    const entry = this.store[key];\n\n    if (!entry || this.isWindowExpired(entry, options.windowMs)) {\n      return {\n        allowed: true,\n        remaining: options.maxRequests,\n        resetTime: new Date(Date.now() + options.windowMs),\n        limit: options.maxRequests,\n      };\n    }\n\n    return calculateRateLimit(\n      entry.requests,\n      entry.windowStart,\n      options.maxRequests,\n      options.windowMs,\n    );\n  }\n\n  /**\n   * Reset rate limit for a specific identifier\n   */\n  public async resetRateLimit(\n    identifier: string,\n    config?: Partial<RateLimitOptions>,\n  ): Promise<void> {\n    const options = { ...this.defaultConfig, ...config };\n    const key = options.keyGenerator\n      ? options.keyGenerator(identifier)\n      : identifier;\n\n    delete this.store[key];\n  }\n\n  /**\n   * Get rate limit configuration for API credentials\n   */\n  public getConfigForCredentials(credentials: ApiCredentials): RateLimitConfig {\n    return {\n      maxRequests: credentials.rateLimit.maxRequests,\n      windowMs: credentials.rateLimit.windowMs,\n      enabled: credentials.rateLimit.enabled,\n    };\n  }\n\n  /**\n   * Check rate limit specifically for API credentials\n   */\n  public async checkApiCredentialsRateLimit(\n    credentials: ApiCredentials,\n    operation: \"authorize\" | \"token\" | \"userinfo\" | \"generate\" | \"general\" = \"general\",\n  ): Promise<RateLimitResult> {\n    const config = this.getConfigForCredentials(credentials);\n    const key = `api:${credentials.id}:${operation}`;\n\n    return this.checkRateLimit(key, config);\n  }\n\n  /**\n   * Record API request for credentials\n   */\n  public async recordApiRequest(\n    credentials: ApiCredentials,\n    success: boolean = true,\n    operation: \"authorize\" | \"token\" | \"userinfo\" | \"generate\" | \"general\" = \"general\",\n  ): Promise<void> {\n    const config = this.getConfigForCredentials(credentials);\n    const identifier = `${credentials.clientId}:${operation}`;\n\n    await this.recordRequest(identifier, success, config);\n  }\n\n  /**\n   * Global rate limiting (per IP address)\n   */\n  public async checkGlobalRateLimit(\n    ipAddress: string,\n    config?: Partial<RateLimitConfig>,\n  ): Promise<RateLimitResult> {\n    const globalConfig = {\n      maxRequests: 1000, // Higher limit for IP-based limiting\n      windowMs: 3600000, // 1 hour\n      enabled: true,\n      ...config,\n    };\n\n    return this.checkRateLimit(`global:${ipAddress}`, globalConfig);\n  }\n\n  /**\n   * User-specific rate limiting\n   */\n  public async checkUserRateLimit(\n    userId: string,\n    config?: Partial<RateLimitConfig>,\n  ): Promise<RateLimitResult> {\n    const userConfig = {\n      maxRequests: 500, // Per user limit\n      windowMs: 3600000, // 1 hour\n      enabled: true,\n      ...config,\n    };\n\n    return this.checkRateLimit(`user:${userId}`, userConfig);\n  }\n\n  /**\n   * Check if rate limit window has expired\n   */\n  private isWindowExpired(entry: RateLimitEntry, windowMs: number): boolean {\n    const now = new Date();\n    const windowEnd = new Date(entry.windowStart.getTime() + windowMs);\n    return now > windowEnd;\n  }\n\n  /**\n   * Start cleanup process for expired entries\n   */\n  private startCleanup(): void {\n    // Run cleanup every 5 minutes\n    this.cleanupInterval = setInterval(\n      () => {\n        this.cleanup();\n      },\n      5 * 60 * 1000,\n    );\n  }\n\n  /**\n   * Clean up expired entries from memory\n   */\n  private cleanup(): void {\n    const now = new Date();\n    const keysToDelete: string[] = [];\n\n    for (const [key, entry] of Object.entries(this.store)) {\n      // Remove entries that haven't been used in the last hour\n      const inactiveThreshold = new Date(now.getTime() - 3600000); // 1 hour\n\n      if (entry.lastRequest < inactiveThreshold) {\n        keysToDelete.push(key);\n      }\n    }\n\n    keysToDelete.forEach((key) => {\n      delete this.store[key];\n    });\n\n    if (keysToDelete.length > 0) {\n      console.log(\n        `Rate limiter cleaned up ${keysToDelete.length} expired entries`,\n      );\n    }\n  }\n\n  /**\n   * Get current store statistics\n   */\n  public getStats(): {\n    totalEntries: number;\n    activeEntries: number;\n    oldestEntry: Date | null;\n    newestEntry: Date | null;\n  } {\n    const entries = Object.values(this.store);\n    const now = new Date();\n    const activeThreshold = new Date(now.getTime() - 3600000); // 1 hour\n\n    const activeEntries = entries.filter(\n      (entry) => entry.lastRequest >= activeThreshold,\n    );\n    const timestamps = entries.map((entry) => entry.lastRequest);\n\n    return {\n      totalEntries: entries.length,\n      activeEntries: activeEntries.length,\n      oldestEntry:\n        timestamps.length > 0\n          ? new Date(Math.min(...timestamps.map((t) => t.getTime())))\n          : null,\n      newestEntry:\n        timestamps.length > 0\n          ? new Date(Math.max(...timestamps.map((t) => t.getTime())))\n          : null,\n    };\n  }\n\n  /**\n   * Clear all rate limit data\n   */\n  public clearAll(): void {\n    this.store = {};\n  }\n\n  /**\n   * Stop the rate limiter and cleanup\n   */\n  public stop(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    this.clearAll();\n  }\n}\n\n// Create singleton instance\nconst rateLimiter = new RateLimiter();\n\n// Export both the class and singleton instance\nexport { RateLimiter };\nexport default rateLimiter;\n\n// Helper functions for middleware usage\nexport const createRateLimitMiddleware = (\n  config?: Partial<RateLimitConfig>,\n) => {\n  return async (\n    request: Request,\n    identifier: string,\n  ): Promise<RateLimitResult> => {\n    return rateLimiter.checkRateLimit(identifier, config);\n  };\n};\n\nexport const createApiRateLimitMiddleware = () => {\n  return async (\n    credentials: ApiCredentials,\n    operation?: \"authorize\" | \"token\" | \"userinfo\" | \"general\",\n  ): Promise<RateLimitResult> => {\n    return rateLimiter.checkApiCredentialsRateLimit(credentials, operation);\n  };\n};\n\n// Rate limit headers helper\nexport const createRateLimitHeaders = (\n  result: RateLimitResult,\n): Record<string, string> => {\n  return {\n    \"X-RateLimit-Limit\": result.limit.toString(),\n    \"X-RateLimit-Remaining\": result.remaining.toString(),\n    \"X-RateLimit-Reset\": Math.ceil(\n      result.resetTime.getTime() / 1000,\n    ).toString(),\n  };\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1120, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/app/api/credentials/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport {\r\n  createApiCredentials,\r\n  getUserApiCredentials,\r\n  getUser,\r\n  logSecurityEvent,\r\n  recordUsageStats,\r\n} from '@/lib/firebase';\r\nimport rateLimiter from '@/lib/rateLimiter';\r\nimport {\r\n  generateClientId,\r\n  generateClientSecret,\r\n  generateApiKey,\r\n  createSuccessResponse,\r\n  createErrorResponse,\r\n  createSecurityLogData,\r\n  sanitizeRedirectUris,\r\n  sanitizeAllowedOrigins,\r\n  validateScopes,\r\n  stringToScopes,\r\n  getClientIpAddress,\r\n} from '@/lib/utils';\r\nimport { CreateCredentialForm, ApiCredentials } from '@/types';\r\n\r\n// GET /api/credentials - Get user's API credentials\r\nexport async function GET(request: NextRequest) {\r\n  const clientIp = getClientIpAddress(request);\r\n  const searchParams = request.nextUrl.searchParams;\r\n  const userId = searchParams.get('userId');\r\n\r\n  try {\r\n    if (!userId) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_list',\r\n        false,\r\n        request,\r\n        undefined,\r\n        undefined,\r\n        'Missing userId parameter'\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('userId parameter is required'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify user exists\r\n    const user = await getUser(userId);\r\n    if (!user) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_list',\r\n        false,\r\n        request,\r\n        userId,\r\n        undefined,\r\n        'User not found'\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('User not found'),\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Check rate limiting for this user\r\n    const rateLimitResult = await rateLimiter.checkUserRateLimit(userId);\r\n    if (!rateLimitResult.allowed) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_list',\r\n        false,\r\n        request,\r\n        userId,\r\n        undefined,\r\n        'Rate limit exceeded'\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('Rate limit exceeded. Please try again later.'),\r\n        { status: 429 }\r\n      );\r\n    }\r\n\r\n    // Get user's API credentials\r\n    const credentials = await getUserApiCredentials(userId);\r\n\r\n    await logSecurityEvent(createSecurityLogData(\r\n      'credentials_list',\r\n      true,\r\n      request,\r\n      userId,\r\n      undefined,\r\n      undefined,\r\n      { credentialsCount: credentials.length }\r\n    ));\r\n\r\n    return NextResponse.json(\r\n      createSuccessResponse(credentials, 'Credentials retrieved successfully')\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Get credentials error:', error);\r\n\r\n    await logSecurityEvent(createSecurityLogData(\r\n      'credentials_list',\r\n      false,\r\n      request,\r\n      userId || undefined,\r\n      undefined,\r\n      'Internal server error',\r\n      { error: error instanceof Error ? error.message : 'Unknown error' }\r\n    ));\r\n\r\n    return NextResponse.json(\r\n      createErrorResponse('Internal server error'),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST /api/credentials - Create new API credentials\r\nexport async function POST(request: NextRequest) {\r\n  const clientIp = getClientIpAddress(request);\r\n\r\n  try {\r\n    const body: CreateCredentialForm & { userId: string } = await request.json();\r\n    const {\r\n      userId,\r\n      name,\r\n      description,\r\n      redirectUris,\r\n      allowedOrigins,\r\n      scopes,\r\n      rateLimit: rateLimitConfig,\r\n    } = body;\r\n\r\n    // Validate required fields\r\n    if (!userId || !name || !redirectUris) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_create',\r\n        false,\r\n        request,\r\n        userId,\r\n        undefined,\r\n        'Missing required fields',\r\n        { body: { ...body, userId: '[REDACTED]' } }\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('Missing required fields: userId, name, redirectUris'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Verify user exists\r\n    const user = await getUser(userId);\r\n    if (!user) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_create',\r\n        false,\r\n        request,\r\n        userId,\r\n        undefined,\r\n        'User not found'\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('User not found'),\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Check rate limiting for this user\r\n    const rateLimitResult = await rateLimiter.checkUserRateLimit(userId, {\r\n      maxRequests: 10, // Lower limit for creating credentials\r\n      windowMs: 3600000, // 1 hour\r\n    });\r\n\r\n    if (!rateLimitResult.allowed) {\r\n      await logSecurityEvent(createSecurityLogData(\r\n        'credentials_create',\r\n        false,\r\n        request,\r\n        userId,\r\n        undefined,\r\n        'Rate limit exceeded'\r\n      ));\r\n\r\n      return NextResponse.json(\r\n        createErrorResponse('Rate limit exceeded. Please try again later.'),\r\n        { status: 429 }\r\n      );\r\n    }\r\n\r\n    // Validate and sanitize redirect URIs\r\n    const sanitizedRedirectUris = sanitizeRedirectUris(redirectUris);\r\n    if (sanitizedRedirectUris.length === 0) {\r\n      return NextResponse.json(\r\n        createErrorResponse('At least one valid redirect URI is required'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate and sanitize allowed origins\r\n    const sanitizedAllowedOrigins = allowedOrigins\r\n      ? sanitizeAllowedOrigins(allowedOrigins)\r\n      : [];\r\n\r\n    // Validate scopes\r\n    const validatedScopes = validateScopes(scopes || []);\r\n    if (validatedScopes.length === 0) {\r\n      return NextResponse.json(\r\n        createErrorResponse('At least one valid scope is required'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate rate limit configuration\r\n    const maxRequests = rateLimitConfig?.maxRequests || 1000;\r\n    const windowMs = rateLimitConfig?.windowMs || 3600000; // 1 hour\r\n\r\n    if (maxRequests < 1 || maxRequests > 10000) {\r\n      return NextResponse.json(\r\n        createErrorResponse('Max requests must be between 1 and 10,000'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (windowMs < 60000 || windowMs > 86400000) { // 1 minute to 24 hours\r\n      return NextResponse.json(\r\n        createErrorResponse('Window must be between 1 minute and 24 hours'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate name length\r\n    if (name.length < 1 || name.length > 100) {\r\n      return NextResponse.json(\r\n        createErrorResponse('Name must be between 1 and 100 characters'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate description length if provided\r\n    if (description && description.length > 500) {\r\n      return NextResponse.json(\r\n        createErrorResponse('Description must be less than 500 characters'),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Generate credentials\r\n    const clientId = generateClientId();\r\n    const clientSecret = generateClientSecret();\r\n    const apiKey = generateApiKey();\r\n\r\n    // Create credential data\r\n    const credentialData: Omit<ApiCredentials, 'id' | 'createdAt' | 'updatedAt'> = {\r\n      userId,\r\n      clientId,\r\n      clientSecret,\r\n      apiKey,\r\n      name: name.trim(),\r\n      description: description?.trim() || undefined,\r\n      redirectUris: sanitizedRedirectUris,\r\n      allowedOrigins: sanitizedAllowedOrigins,\r\n      scopes: validatedScopes,\r\n      isActive: true,\r\n      lastUsed: undefined,\r\n      rateLimit: {\r\n        maxRequests,\r\n        windowMs,\r\n        enabled: true,\r\n      },\r\n    };\r\n\r\n    // Create the credentials in the database\r\n    const credentialId = await createApiCredentials(credentialData);\r\n\r\n    // Create the response credential object\r\n    const newCredential: ApiCredentials = {\r\n      id: credentialId,\r\n      ...credentialData,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    await logSecurityEvent(createSecurityLogData(\r\n      'credentials_create',\r\n      true,\r\n      request,\r\n      userId,\r\n      credentialId,\r\n      undefined,\r\n      {\r\n        name,\r\n        clientId,\r\n        apiKey,\r\n        scopes: validatedScopes,\r\n        redirectUris: sanitizedRedirectUris,\r\n        rateLimit: { maxRequests, windowMs },\r\n      }\r\n    ));\r\n\r\n    return NextResponse.json(\r\n      createSuccessResponse(newCredential, 'API credentials created successfully'),\r\n      { status: 201 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Create credentials error:', error);\r\n\r\n    await logSecurityEvent(createSecurityLogData(\r\n      'credentials_create',\r\n      false,\r\n      request,\r\n      undefined,\r\n      undefined,\r\n      'Internal server error',\r\n      { error: error instanceof Error ? error.message : 'Unknown error' }\r\n    ));\r\n\r\n    return NextResponse.json(\r\n      createErrorResponse('Internal server error'),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Handle CORS preflight requests\r\nexport async function OPTIONS(request: NextRequest) {\r\n  return new NextResponse(null, {\r\n    status: 200,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}