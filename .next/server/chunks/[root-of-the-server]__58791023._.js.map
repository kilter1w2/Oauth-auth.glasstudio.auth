{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/lib/firebase.ts"],"sourcesContent":["import { initializeApp, getApps, FirebaseApp } from \"firebase/app\";\nimport {\n  getAuth,\n  Auth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  Firestore,\n  collection,\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  getDocs,\n  orderBy,\n  limit,\n  Timestamp,\n  addDoc,\n  onSnapshot,\n  QueryConstraint,\n} from \"firebase/firestore\";\nimport {\n  User,\n  ApiCredentials,\n  OAuthSession,\n  UsageStats,\n  SecurityLog,\n  AccessToken,\n} from \"@/types\";\n\n// Firebase Client Configuration\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase Client\nlet app: FirebaseApp;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApps()[0];\n}\n\n// Client-side Firebase services\nexport const auth: Auth = getAuth(app);\nexport const db: Firestore = getFirestore(app);\nexport const googleProvider: GoogleAuthProvider = new GoogleAuthProvider();\n\n// Collection References\nexport const COLLECTIONS = {\n  USERS: \"users\",\n  API_CREDENTIALS: \"api_credentials\",\n  OAUTH_SESSIONS: \"oauth_sessions\",\n  USAGE_STATS: \"usage_stats\",\n  SECURITY_LOGS: \"security_logs\",\n  ACCESS_TOKENS: \"access_tokens\",\n} as const;\n\n// Utility Functions\nexport const convertTimestamp = (timestamp: Timestamp | Date): Date => {\n  if (timestamp instanceof Timestamp) {\n    return timestamp.toDate();\n  }\n  return timestamp;\n};\n\nexport const convertToTimestamp = (date: Date): Timestamp => {\n  return Timestamp.fromDate(date);\n};\n\n// Authentication Functions\nexport const signInWithGoogle = async (): Promise<FirebaseUser | null> => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    return null;\n  }\n};\n\nexport const signOutUser = async (): Promise<void> => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n  }\n};\n\nexport const onAuthStateChange = (\n  callback: (user: FirebaseUser | null) => void,\n) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// User Management\nexport const createUser = async (\n  userData: Omit<User, \"id\" | \"createdAt\" | \"updatedAt\">,\n): Promise<string> => {\n  const newUser = {\n    ...userData,\n    createdAt: convertToTimestamp(new Date()),\n    updatedAt: convertToTimestamp(new Date()),\n  };\n\n  const userRef = await addDoc(collection(db, COLLECTIONS.USERS), newUser);\n  return userRef.id;\n};\n\nexport const getUser = async (userId: string): Promise<User | null> => {\n  const userDoc = await getDoc(doc(db, COLLECTIONS.USERS, userId));\n  if (!userDoc.exists()) return null;\n\n  const data = userDoc.data();\n  return {\n    ...data,\n    id: userDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as User;\n};\n\nexport const getUserByEmail = async (email: string): Promise<User | null> => {\n  const q = query(\n    collection(db, COLLECTIONS.USERS),\n    where(\"email\", \"==\", email),\n    limit(1),\n  );\n\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) return null;\n\n  const userDoc = querySnapshot.docs[0];\n  const data = userDoc.data();\n\n  return {\n    ...data,\n    id: userDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as User;\n};\n\nexport const updateUser = async (\n  userId: string,\n  updates: Partial<User>,\n): Promise<void> => {\n  const userRef = doc(db, COLLECTIONS.USERS, userId);\n  await updateDoc(userRef, {\n    ...updates,\n    updatedAt: convertToTimestamp(new Date()),\n  });\n};\n\n// API Credentials Management\nexport const createApiCredentials = async (\n  credentialsData: Omit<ApiCredentials, \"id\" | \"createdAt\" | \"updatedAt\">,\n): Promise<string> => {\n  const newCredentials = {\n    ...credentialsData,\n    createdAt: convertToTimestamp(new Date()),\n    updatedAt: convertToTimestamp(new Date()),\n  };\n\n  const credRef = await addDoc(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    newCredentials,\n  );\n  return credRef.id;\n};\n\nexport const getApiCredentials = async (\n  credentialId: string,\n): Promise<ApiCredentials | null> => {\n  const credDoc = await getDoc(\n    doc(db, COLLECTIONS.API_CREDENTIALS, credentialId),\n  );\n  if (!credDoc.exists()) return null;\n\n  const data = credDoc.data();\n  return {\n    ...data,\n    id: credDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as ApiCredentials;\n};\n\nexport const getApiCredentialsByClientId = async (\n  clientId: string,\n): Promise<ApiCredentials | null> => {\n  const q = query(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    where(\"clientId\", \"==\", clientId),\n    limit(1),\n  );\n\n  const querySnapshot = await getDocs(q);\n  if (querySnapshot.empty) return null;\n\n  const credDoc = querySnapshot.docs[0];\n  const data = credDoc.data();\n\n  return {\n    ...data,\n    id: credDoc.id,\n    createdAt: convertTimestamp(data.createdAt),\n    updatedAt: convertTimestamp(data.updatedAt),\n  } as ApiCredentials;\n};\n\nexport const getUserApiCredentials = async (\n  userId: string,\n): Promise<ApiCredentials[]> => {\n  const q = query(\n    collection(db, COLLECTIONS.API_CREDENTIALS),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n  );\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map((doc) => {\n    const data = doc.data();\n    return {\n      ...data,\n      id: doc.id,\n      createdAt: convertTimestamp(data.createdAt),\n      updatedAt: convertTimestamp(data.updatedAt),\n    } as ApiCredentials;\n  });\n};\n\nexport const updateApiCredentials = async (\n  credentialId: string,\n  updates: Partial<ApiCredentials>,\n): Promise<void> => {\n  const credRef = doc(db, COLLECTIONS.API_CREDENTIALS, credentialId);\n  await updateDoc(credRef, {\n    ...updates,\n    updatedAt: convertToTimestamp(new Date()),\n  });\n};\n\nexport const deleteApiCredentials = async (\n  credentialId: string,\n): Promise<void> => {\n  await deleteDoc(doc(db, COLLECTIONS.API_CREDENTIALS, credentialId));\n};\n\nexport const getAccessToken = async (\n  token: string,\n): Promise<AccessToken | null> => {\n  const tokenDoc = await getDoc(doc(db, COLLECTIONS.ACCESS_TOKENS, token));\n  if (!tokenDoc.exists()) return null;\n\n  const data = tokenDoc.data();\n  // The document ID is the token itself.\n  return {\n    token: tokenDoc.id,\n    userId: data.userId,\n    credentialId: data.credentialId,\n    sessionId: data.sessionId,\n    scopes: data.scopes,\n    tokenType: data.tokenType,\n    isRevoked: data.isRevoked,\n    createdAt: convertTimestamp(data.createdAt),\n    expiresAt: convertTimestamp(data.expiresAt),\n  } as AccessToken;\n};\n\nexport const revokeAccessToken = async (token: string): Promise<void> => {\n  const tokenRef = doc(db, COLLECTIONS.ACCESS_TOKENS, token);\n  // Check if the document exists before updating to avoid creating new documents.\n  const tokenSnap = await getDoc(tokenRef);\n  if (tokenSnap.exists()) {\n    await updateDoc(tokenRef, {\n      isRevoked: true,\n    });\n  }\n};\n\n// OAuth Session Management\nexport const createOAuthSession = async (\n  sessionData: Omit<\n    OAuthSession,\n    \"createdAt\" | \"expiresAt\" | \"authorizedAt\" | \"tokenExpiresAt\"\n  > & { expiresAt: Date },\n): Promise<string> => {\n  const newSession = {\n    ...sessionData,\n    createdAt: convertToTimestamp(new Date()),\n    expiresAt: convertToTimestamp(sessionData.expiresAt),\n  };\n\n  const sessionRef = await addDoc(\n    collection(db, COLLECTIONS.OAUTH_SESSIONS),\n    newSession,\n  );\n  return sessionRef.id;\n};\n\nexport const getOAuthSession = async (\n  sessionId: string,\n): Promise<OAuthSession | null> => {\n  const sessionDoc = await getDoc(\n    doc(db, COLLECTIONS.OAUTH_SESSIONS, sessionId),\n  );\n  if (!sessionDoc.exists()) return null;\n\n  const data = sessionDoc.data();\n  return {\n    ...data,\n    createdAt: convertTimestamp(data.createdAt),\n    expiresAt: convertTimestamp(data.expiresAt),\n    authorizedAt: data.authorizedAt\n      ? convertTimestamp(data.authorizedAt)\n      : undefined,\n    tokenExpiresAt: data.tokenExpiresAt\n      ? convertTimestamp(data.tokenExpiresAt)\n      : undefined,\n  } as OAuthSession;\n};\n\nexport const updateOAuthSession = async (\n  sessionId: string,\n  updates: Partial<OAuthSession>,\n): Promise<void> => {\n  const updateData: any = { ...updates };\n\n  if (updates.expiresAt) {\n    updateData.expiresAt = convertToTimestamp(updates.expiresAt);\n  }\n  if (updates.authorizedAt) {\n    updateData.authorizedAt = convertToTimestamp(updates.authorizedAt);\n  }\n  if (updates.tokenExpiresAt) {\n    updateData.tokenExpiresAt = convertToTimestamp(updates.tokenExpiresAt);\n  }\n\n  await updateDoc(\n    doc(db, COLLECTIONS.OAUTH_SESSIONS, sessionId),\n    updateData,\n  );\n};\n\n// Usage Statistics\nexport const recordUsageStats = async (\n  credentialId: string,\n  success: boolean,\n): Promise<void> => {\n  const today = new Date().toISOString().split(\"T\")[0];\n  const statsId = `${credentialId}_${today}`;\n\n  const statsRef = doc(db, COLLECTIONS.USAGE_STATS, statsId);\n  const statsDoc = await getDoc(statsRef);\n\n  if (statsDoc.exists()) {\n    const currentData = statsDoc.data();\n    await updateDoc(statsRef, {\n      requests: currentData.requests + 1,\n      errors: success ? currentData.errors : currentData.errors + 1,\n      successfulAuths: success\n        ? currentData.successfulAuths + 1\n        : currentData.successfulAuths,\n      failedAuths: success\n        ? currentData.failedAuths\n        : currentData.failedAuths + 1,\n      lastRequest: convertToTimestamp(new Date()),\n    });\n  } else {\n    await setDoc(statsRef, {\n      credentialId,\n      date: today,\n      requests: 1,\n      errors: success ? 0 : 1,\n      successfulAuths: success ? 1 : 0,\n      failedAuths: success ? 0 : 1,\n      lastRequest: convertToTimestamp(new Date()),\n    });\n  }\n};\n\n// Security Logging\nexport const logSecurityEvent = async (\n  logData: Omit<SecurityLog, \"id\" | \"timestamp\">,\n): Promise<void> => {\n  const logDoc = {\n    ...logData,\n    timestamp: convertToTimestamp(new Date()),\n  };\n\n  await addDoc(collection(db, COLLECTIONS.SECURITY_LOGS), logDoc);\n};\n\n// Cleanup expired sessions and tokens\nexport const cleanupExpiredSessions = async (): Promise<void> => {\n  const now = new Date();\n  const expiredSessionsQuery = query(\n    collection(db, COLLECTIONS.OAUTH_SESSIONS),\n    where(\"expiresAt\", \"<\", convertToTimestamp(now)),\n  );\n\n  const expiredSessions = await getDocs(expiredSessionsQuery);\n  const deletePromises = expiredSessions.docs.map((doc) => deleteDoc(doc.ref));\n\n  await Promise.all(deletePromises);\n};\n\nexport default {\n  auth,\n  db,\n  googleProvider,\n  signInWithGoogle,\n  signOutUser,\n  onAuthStateChange,\n  createUser,\n  getUser,\n  getUserByEmail,\n  updateUser,\n  createApiCredentials,\n  getApiCredentials,\n  getApiCredentialsByClientId,\n  getUserApiCredentials,\n  updateApiCredentials,\n  deleteApiCredentials,\n  getAccessToken,\n  revokeAccessToken,\n  createOAuthSession,\n  getOAuthSession,\n  updateOAuthSession,\n  recordUsageStats,\n  logSecurityEvent,\n  cleanupExpiredSessions,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/minht/Downloads/Oauth-auth.glasstudio.auth/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getAdminDb, getAdminAuth, auth, db } from \"@/lib/firebase\";\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n\n  try {\n    // Basic environment check\n    const environment = {\n      node_env: process.env.NODE_ENV,\n      app_url: process.env.APP_URL,\n      app_domain: process.env.APP_DOMAIN,\n      nextauth_url: process.env.NEXTAUTH_URL,\n      firebase_project: process.env.FIREBASE_PROJECT_ID,\n      has_jwt_secret: !!process.env.JWT_SECRET,\n      has_encryption_key: !!process.env.ENCRYPTION_KEY,\n      has_nextauth_secret: !!process.env.NEXTAUTH_SECRET,\n    };\n\n    // Test admin services\n    const adminDb = await getAdminDb();\n    const adminAuth = await getAdminAuth();\n\n    // Firebase configuration check\n    const firebase = {\n      client: {\n        has_api_key: !!process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n        has_auth_domain: !!process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n        has_project_id: !!process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n        has_storage_bucket: !!process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n        has_messaging_sender_id:\n          !!process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n        has_app_id: !!process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n        auth_initialized:\n          typeof window !== \"undefined\" ? !!auth : \"server-side\",\n        db_initialized: typeof window !== \"undefined\" ? !!db : \"server-side\",\n      },\n      admin: {\n        has_project_id: !!process.env.FIREBASE_PROJECT_ID,\n        has_client_email: !!process.env.FIREBASE_CLIENT_EMAIL,\n        has_private_key: !!process.env.FIREBASE_PRIVATE_KEY,\n        admin_auth_initialized: !!adminAuth,\n        admin_db_initialized: !!adminDb,\n      },\n    };\n\n    // Test database connectivity\n    let databaseTests = {\n      admin_db_connection: false,\n      admin_auth_connection: false,\n      collections_accessible: false,\n      error: null as string | null,\n    };\n\n    try {\n      if (adminDb) {\n        // Test Firestore connection\n        await adminDb.collection(\"_health_check\").limit(1).get();\n        databaseTests.admin_db_connection = true;\n        databaseTests.collections_accessible = true;\n      }\n\n      if (adminAuth) {\n        // Test Auth connection by checking if we can access the service\n        await adminAuth.listUsers(1);\n        databaseTests.admin_auth_connection = true;\n      }\n    } catch (error) {\n      databaseTests.error =\n        error instanceof Error ? error.message : \"Unknown database error\";\n    }\n\n    // Rate limiting configuration\n    const rateLimiting = {\n      max_requests: process.env.RATE_LIMIT_MAX_REQUESTS || \"100\",\n      window_ms: process.env.RATE_LIMIT_WINDOW_MS || \"900000\",\n      enabled: process.env.SKIP_RATE_LIMIT !== \"true\",\n    };\n\n    // OAuth configuration\n    const oauth = {\n      session_expiry_minutes: process.env.SESSION_EXPIRY_MINUTES || \"10\",\n      auth_code_expiry_minutes: process.env.AUTH_CODE_EXPIRY_MINUTES || \"10\",\n      access_token_expiry_minutes:\n        process.env.ACCESS_TOKEN_EXPIRY_MINUTES || \"60\",\n      refresh_token_expiry_days: process.env.REFRESH_TOKEN_EXPIRY_DAYS || \"30\",\n      tunnel_domain: process.env.TUNNEL_DOMAIN || null,\n    };\n\n    // Security configuration\n    const security = {\n      csp_enabled: process.env.CSP_ENABLED === \"true\",\n      cors_origins: process.env.CORS_ORIGINS || \"http://localhost:3000\",\n      force_https: process.env.FORCE_HTTPS === \"true\",\n      security_logging: process.env.SECURITY_LOGGING !== \"false\",\n    };\n\n    // Overall health status\n    const criticalIssues = [];\n\n    if (!firebase.admin.admin_db_initialized) {\n      criticalIssues.push(\"Firebase Admin Firestore not initialized\");\n    }\n\n    if (!firebase.admin.admin_auth_initialized) {\n      criticalIssues.push(\"Firebase Admin Auth not initialized\");\n    }\n\n    if (!environment.has_jwt_secret) {\n      criticalIssues.push(\"JWT_SECRET not configured\");\n    }\n\n    if (!environment.has_encryption_key) {\n      criticalIssues.push(\"ENCRYPTION_KEY not configured\");\n    }\n\n    if (!databaseTests.admin_db_connection) {\n      criticalIssues.push(\"Database connection failed\");\n    }\n\n    const warnings = [];\n\n    if (!oauth.tunnel_domain && environment.node_env === \"development\") {\n      warnings.push(\n        \"TUNNEL_DOMAIN not set - OAuth callbacks may not work in development\",\n      );\n    }\n\n    if (!environment.has_nextauth_secret) {\n      warnings.push(\"NEXTAUTH_SECRET not configured\");\n    }\n\n    const overallStatus =\n      criticalIssues.length === 0\n        ? warnings.length === 0\n          ? \"healthy\"\n          : \"healthy_with_warnings\"\n        : \"unhealthy\";\n\n    const endTime = Date.now();\n    const responseTime = endTime - startTime;\n\n    const healthCheck = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      response_time_ms: responseTime,\n      version: \"1.0.0\",\n      system: {\n        environment,\n        firebase,\n        database_tests: databaseTests,\n        rate_limiting: rateLimiting,\n        oauth,\n        security,\n      },\n      issues: {\n        critical: criticalIssues,\n        warnings,\n      },\n      endpoints: {\n        authorization: `${environment.app_url}/api/oauth/authorize`,\n        token: `${environment.app_url}/api/oauth/token`,\n        userinfo: `${environment.app_url}/api/oauth/userinfo`,\n        dashboard: `${environment.app_url}/dashboard`,\n      },\n      next_steps:\n        criticalIssues.length > 0\n          ? [\n              \"Fix critical issues listed above\",\n              \"Check Firebase Admin SDK configuration\",\n              \"Verify environment variables are set correctly\",\n              \"Refer to SETUP_GUIDE.md for detailed instructions\",\n            ]\n          : [\n              \"System is ready for OAuth operations\",\n              \"Create your first API credentials in the dashboard\",\n              \"Test the OAuth flow with a sample application\",\n              \"Configure production settings when ready\",\n            ],\n    };\n\n    // Set appropriate status code\n    const statusCode = overallStatus === \"unhealthy\" ? 503 : 200;\n\n    return NextResponse.json(healthCheck, {\n      status: statusCode,\n      headers: {\n        \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n        Pragma: \"no-cache\",\n        Expires: \"0\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Health check failed:\", error);\n\n    return NextResponse.json(\n      {\n        status: \"error\",\n        timestamp: new Date().toISOString(),\n        error:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n        message: \"Health check endpoint encountered an error\",\n        suggestion: \"Check server logs and verify your configuration\",\n      },\n      {\n        status: 500,\n        headers: {\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          Pragma: \"no-cache\",\n          Expires: \"0\",\n        },\n      },\n    );\n  }\n}\n\n// Also support HEAD requests for simple uptime checks\nexport async function HEAD(request: NextRequest) {\n  try {\n    const isHealthy = !!adminDb && !!adminAuth;\n    return new NextResponse(null, {\n      status: isHealthy ? 200 : 503,\n      headers: {\n        \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n      },\n    });\n  } catch {\n    return new NextResponse(null, { status: 503 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}